package org.palladiosimulator.pcm.confidentiality.attacker.helper;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.VulnerabilitySystemSpecification;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Attack;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Vulnerability;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.confidentiality.context.set.ContextSet;
import org.palladiosimulator.pcm.core.composition.AssemblyContext;
import org.palladiosimulator.pcm.resourceenvironment.LinkingResource;
import org.palladiosimulator.pcm.resourceenvironment.ResourceContainer;

public final class VulnerabilityHelper {
    private VulnerabilityHelper() {
        assert false;
    }

    /**
     * Checks whether an attack is possible and returns the {@link Vulnerability} with the highest
     * impact on Confidentiality. If the vulnerabilities contain multiple vulnerabilities with
     * highest impact it returns any vulnerbility of it
     * 
     * @param credentials
     * @param policies
     * @param vulnerabilities
     * @param attacks
     * @param vector
     * @return {@link Vulnerability} with the highest ConfidentialityImpact if no attack is possible
     *         null
     */
    public static Vulnerability checkAttack(ContextSet credentials, List<ContextSet> policies,
            List<Vulnerability> vulnerabilities, List<Attack> attacks, AttackVector vector) {
        var applicableVulnerabilities = new ArrayList<Vulnerability>();
        for (var policy : policies) {
            for (var vulnerability : vulnerabilities) {
                for (var attack : attacks) {
                    if (attack.canExploit(vulnerability, credentials, policy, vector)) {
                        if (vulnerability.getConfidentialityImpact() == ConfidentialityImpact.HIGH)
                            return vulnerability;
                        applicableVulnerabilities.add(vulnerability);
                    }
                }
            }
        }
        var returnValue = applicableVulnerabilities.stream()
                .filter(e -> e.getConfidentialityImpact() == ConfidentialityImpact.LOW).findAny();
        if (returnValue.isPresent())
            return returnValue.get();
        return applicableVulnerabilities.stream().findAny().orElse(null);
    }

    public static List<Vulnerability> getVulnerabilities(VulnerabilitySystemSpecification vulnerabilityspecification,
            ResourceContainer resource) {
        return getVulnerabilities(vulnerabilityspecification.getVulnerabilities(), resource);
    }

    public static List<Vulnerability> getVulnerabilities(List<SystemIntegration> vulnerabilitySpecification,
            ResourceContainer resource) {
        return getVulnerbilities(vulnerabilitySpecification, SystemIntegration::getResourcecontainer, resource);
    }
    
    public static List<Vulnerability> getVulnerabilities(VulnerabilitySystemSpecification vulnerabilityspecification,
            AssemblyContext component) {
        return getVulnerabilities(vulnerabilityspecification.getVulnerabilities(), component);
    }

    public static List<Vulnerability> getVulnerabilities(List<SystemIntegration> vulnerabilitySpecification,
            AssemblyContext component) {
        return getVulnerbilities(vulnerabilitySpecification, SystemIntegration::getResourcecontainer, component);
    }

    public static List<Vulnerability> getVulnerabilities(VulnerabilitySystemSpecification vulnerabilityspecification,
            LinkingResource resource) {
        return getVulnerabilities(vulnerabilityspecification.getVulnerabilities(), resource);
    }

    public static List<Vulnerability> getVulnerabilities(List<SystemIntegration> vulnerabilitySpecification,
            LinkingResource resource) {
        return getVulnerbilities(vulnerabilitySpecification, SystemIntegration::getLinkingresource, resource);
    }

    private static List<Vulnerability> getVulnerbilities(List<SystemIntegration> specification,
            Function<SystemIntegration, EObject> method, EObject object) {
        return specification.stream().filter(e -> EcoreUtil.equals(method.apply(e), object))
                .map(SystemIntegration::getVulnerability).collect(Collectors.toList());
    }

}
