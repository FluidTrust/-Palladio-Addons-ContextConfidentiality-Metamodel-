/**
 */
package org.palladiosimulator.pcm.confidentiality.attackerSpecification.impl;

import org.eclipse.emf.common.util.Enumerator;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackPath;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.SurfaceAttacker;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.VulnerabilityFilterCriterion;

import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.SystemIntegration;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.VulnerabilitySystemIntegration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Vulnerability Filter Criterion</b></em>'.
 * <!-- end-user-doc -->
 *
 * @generated
 */
public abstract class VulnerabilityFilterCriterionImpl extends VulnerabilityFilterCriterionImplGen implements VulnerabilityFilterCriterion
{

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated NOT
     */
    @Override
    public boolean isElementFiltered(final SystemIntegration systemIntegration, 
            final SurfaceAttacker surfaceAttacker, final AttackPath attackPath)
    {
        if (systemIntegration instanceof VulnerabilitySystemIntegration) { //TODO maybe rather use id
            final var vulnerability = ((VulnerabilitySystemIntegration) systemIntegration).getVulnerability();
            return !isVulnerabilityInRange(vulnerability);
        }
        return false;
    }
	
	protected boolean isLiteralValueInRange(final Enumerator vulnerabilityEnumLiteral, final Enumerator maximumEnumLiteral) {
	    return vulnerabilityEnumLiteral.getValue() <= maximumEnumLiteral.getValue();
	}

} //VulnerabilityFilterCriterionImpl
