grammar org.palladiosimulator.pcm.confidentiality.context.ConfidentialityContextDSL with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type 
import "platform:/resource/org.palladiosimulator.pcm.confidentiality.context/model/context.ecore#//policy" as policy
import "platform:/resource/org.palladiosimulator.pcm.confidentiality.context/model/context.ecore#//system" as system
import "platform:/resource/org.palladiosimulator.pcm.confidentiality.context/model/context.ecore#//systemcontext" as systemcontext
import "platform:/resource/org.palladiosimulator.pcm/model/pcm.ecore#//repository" as repository

// Model

PolicySet returns policy::PolicySet:
	'PolicySet'
	
	'{'
		('combiningAlgorithm:' combiningAlgorithm=PolicyCombiningAlgorithm)?
		('policysets:' '[' policyset+=PolicySet ( "," policyset+=PolicySet)* ']' )?
		('policy:' '[' policy+=Policy ( "," policy+=Policy)* ']' )?
		('targets:' '[' target+=AllOf ( "," target+=AllOf)* ']' )?
	'}';


Policy returns policy::Policy:
	'Policy'
	
	'{'
		('combiningAlgorithm:' combiningAlgorithm=RuleCombiningAlgorithm)?
		('targets:' '[' target+=AllOf ( "," target+=AllOf)* ']' )?
		('rules:' '[' rule+=Rule ( "," rule+=Rule)* ']' )?
		('variabledefinitions:' '[' variabledefinitions+=VariableDefinition ( "," variabledefinitions+=VariableDefinition)* ']' )?
	'}';


Rule returns policy::Rule:
	'Rule'
	
	'{'
		('permit:' permit=PermitType)?
		('condition:' condition=Expression)?
		('targets:' '[' target+=AllOf ( "," target+=AllOf)* ']' )?
	'}';


AllOf returns policy::AllOf:
	'AllOf' 
	'{'
		'match:' '[' match+=Match ( "," match+=Match)* ']'
	'}';


Match returns policy::Match:
	'Match'
	
	'{'
		// TODO: find missing subclasses
	'}';


VariableDefinition returns policy::VariableDefinitions:
	'VariableDefinition'
	
	'{'
		'expression:' expression=Expression
	'}'
;



// ----------------- Expression ----------------- \\

				
Expression returns policy::Expression:
	Apply | AttributeSelector | SimpleAttributeCondition | AttributeDesignator | FunctionReference | VariableReference | AttributeValueReference;


Apply returns policy::Apply:
	'Apply'
	
	'{'
		('operation:' operation=Operations)?
		('parameters:' '[' parameters+=Expression ( "," parameters+=Expression)* ']')?
	'}'
;


AttributeSelector returns policy::AttributeSelector:
	'AttributeSelector'
	
	'{'
		('category:' category=Category)?
		('mustBePresent:' mustBePresent=EBoolean)?
	'}'
;


SimpleAttributeCondition returns policy::SimpleAttributeCondition:
	'SimpleAttributeCondition'
	
	'{'
		('category:' category=Category)?
		('mustBePresent:' mustBePresent=EBoolean)?
		('only:' only=EBoolean)?
		'attribute' attribute=[system::UsageSpecification|EString] // TODO: Link to another model
	'}'
;


AttributeDesignator returns policy::AttributeDesignator:
	'AttributeDesignator'
	
	'{'
		('category:' category=Category)?
		('mustBePresent:' mustBePresent=EBoolean)?
		('type:' type=DataTypes)?
		'attribute' attribute=[systemcontext::Attribute|EString] // TODO: Link to another model
	'}'
;


FunctionReference returns policy::FunctionReference:
	'FunctionReference'
	
	'{'
		('function:' function=Operations)?
	'}'
;


VariableReference returns policy::VariableReference:
	'VariableReference'
	
	'{'
		'variabledefinitions' variabledefinitions=[policy::VariableDefinitions|EString] // TODO: Link to the same model
	'}'
;


AttributeValueReference returns policy::AttributeValueReference:
	'AttributeValueReference'
	
	'{'
		'attributevalue' attributevalue=[systemcontext::AttributeValue|EString] // TODO: Link to another model
	'}'
;



// ----------------- pcm::Repository ----------------- \\

	
DataType returns repository::DataType:
	PrimitiveDataType | CollectionDataType | CompositeDataType;


PrimitiveDataType returns repository::PrimitiveDataType:
	'PrimitiveDataType'
	'{'
		'type' type=PrimitiveTypeEnum
	'}';


CollectionDataType returns repository::CollectionDataType:
	'CollectionDataType'
	
	'{'
		'entityName' entityName=EString
		'innerType_CollectionDataType' innerType_CollectionDataType=[repository::DataType|EString]
	'}';


CompositeDataType returns repository::CompositeDataType:
	'CompositeDataType'
	
	'{'
		'entityName' entityName=EString
		('parentType_CompositeDataType' '(' parentType_CompositeDataType+=[repository::CompositeDataType|EString] ( "," parentType_CompositeDataType+=[repository::CompositeDataType|EString])* ')' )?
		('innerDeclaration_CompositeDataType' '{' innerDeclaration_CompositeDataType+=InnerDeclaration ( "," innerDeclaration_CompositeDataType+=InnerDeclaration)* '}' )?
	'}';


InnerDeclaration returns repository::InnerDeclaration:
	'InnerDeclaration'
	'{'
		'entityName' entityName=EString
		'datatype_InnerDeclaration' datatype_InnerDeclaration=[repository::DataType|EString]
	'}';


enum PrimitiveTypeEnum returns repository::PrimitiveTypeEnum:
				INT = 'INT' | STRING = 'STRING' | BOOL = 'BOOL' | DOUBLE = 'DOUBLE' | CHAR = 'CHAR' | BYTE = 'BYTE' | LONG = 'LONG';



// ----------------- context::systemcontext Enums ----------------- \\


enum DataTypes returns systemcontext::DataTypes:
				String = 'String' | Boolean = 'Boolean' | Integer = 'Integer' | Double = 'Double' | Date = 'Date';



// ----------------- ECore Datatypes ----------------- \\


EString returns ecore::EString:
	STRING | ID;


EBoolean returns ecore::EBoolean:
	'true' | 'false';	



// ----------------- context::policy Enums ----------------- \\


enum PolicyCombiningAlgorithm returns policy::PolicyCombiningAlgorithm:
				DENY_OVERRIDES = 'DENY_OVERRIDES' | PERMIT_OVERRIDES = 'PERMIT_OVERRIDES' | FIRST_APPLICABLE = 'FIRST_APPLICABLE' | ONLY_ONE_APPLICABLE = 'ONLY_ONE_APPLICABLE' | ORDERED_DENY_OVERRIDES = 'ORDERED_DENY_OVERRIDES' | ORDERED_PERMIT_OVERRIDES = 'ORDERED_PERMIT_OVERRIDES' | DENY_UNLESS_PERMIT = 'DENY_UNLESS_PERMIT' | PERMIT_UNLESS_DENY = 'PERMIT_UNLESS_DENY';


enum RuleCombiningAlgorithm returns policy::RuleCombiningAlgorihtm:
				DENY_OVERRIDES = 'DENY_OVERRIDES' | PERMIT_OVERRIDES = 'PERMIT_OVERRIDES' | FIRST_APPLICABLE = 'FIRST_APPLICABLE' | ONLY_ONE_APPLICABLE = 'ONLY_ONE_APPLICABLE' | ORDERED_DENY_OVERRIDES = 'ORDERED_DENY_OVERRIDES' | ORDERED_PERMIT_OVERRIDES = 'ORDERED_PERMIT_OVERRIDES' | DENY_UNLESS_PERMIT = 'DENY_UNLESS_PERMIT' | PERMIT_UNLESS_DENY = 'PERMIT_UNLESS_DENY';


enum PermitType returns policy::PermitType:
				DENY = 'DENY' | PERMIT = 'PERMIT';


enum Category returns policy::Category:
				SUBJECT = 'SUBJECT' | RESOURCE = 'RESOURCE' | ENVIRONMENT = 'ENVIRONMENT' | ACTION = 'ACTION';

	
enum Operations returns policy::Operations:
				STRING_EQUAL = 'STRING_EQUAL' | BOOLEAN_EQUAL = 'BOOLEAN_EQUAL' | INTEGER_EQUAL = 'INTEGER_EQUAL' 
				| DOUBLE_EQUAL = 'DOUBLE_EQUAL' | DATE_EQUAL = 'DATE_EQUAL' | TIME_EQUAL = 'TIME_EQUAL' | DATETIME_EQUAL = 'DATETIME_EQUAL' 
				| DAYTIMEDURATION_EQUAL = 'DAYTIMEDURATION_EQUAL' | YEARMONTHDURATION_EQUAL = 'YEARMONTHDURATION_EQUAL' 
				| STRING_EQUAL_IGNORE_CASE = 'STRING_EQUAL_IGNORE_CASE' | ANYURI_EQUAL = 'ANYURI_EQUAL' | X500NAME_EQUAL = 'X500NAME_EQUAL' 
				| RFC822NAME_EQUAL = 'RFC822NAME_EQUAL' | HEXBINARY_EQUAL = 'HEXBINARY_EQUAL' | BASE64BINARY_EQUAL = 'BASE64BINARY_EQUAL' 
				| INTEGER_ADD = 'INTEGER_ADD' | DOUBLE_ADD = 'DOUBLE_ADD' | INTEGER_SUBTRACT = 'INTEGER_SUBTRACT' 
				| DOUBLE_SUBTRACT = 'DOUBLE_SUBTRACT' | INTEGER_MULTIPLY = 'INTEGER_MULTIPLY' | DOUBLE_MULTIPLY = 'DOUBLE_MULTIPLY' 
				| INTEGER_DIVIDE = 'INTEGER_DIVIDE' | DOUBLE_DIVIDE = 'DOUBLE_DIVIDE' | INTEGER_MOD = 'INTEGER_MOD' | INTEGER_ABS = 'INTEGER_ABS' 
				| DOUBLE_ABS = 'DOUBLE_ABS' | ROUND = 'ROUND' | FLOOR = 'FLOOR' | STRING_NORMALIZE_SPACE = 'STRING_NORMALIZE_SPACE' 
				| STRING_NORMALIZE_TO_LOWER_CASE = 'STRING_NORMALIZE_TO_LOWER_CASE' | DOUBLE_TO_INTEGER = 'DOUBLE_TO_INTEGER' 
				| INTEGER_TO_DOUBLE = 'INTEGER_TO_DOUBLE' | OR = 'OR' | AND = 'AND' | N_OF = 'N_OF' | NOT = 'NOT' | PRESENT = 'PRESENT' 
				| INTEGER_GREATER_THAN = 'INTEGER_GREATER_THAN' | INTEGER_GREATER_THAN_OR_EQUAL = 'INTEGER_GREATER_THAN_OR_EQUAL' 
				| INTEGER_LESS_THAN = 'INTEGER_LESS_THAN' | INTEGER_LESS_THAN_OR_EQUAL = 'INTEGER_LESS_THAN_OR_EQUAL' 
				| DOUBLE_GREATER_THAN = 'DOUBLE_GREATER_THAN' | DOUBLE_GREATER_THAN_OR_EQUAL = 'DOUBLE_GREATER_THAN_OR_EQUAL'
				| DOUBLE_LESS_THAN = 'DOUBLE_LESS_THAN' | DOUBLE_LESS_THAN_OR_EQUAL = 'DOUBLE_LESS_THAN_OR_EQUAL' 
				| DATETIME_ADD_DAYTIMEDURATION = 'DATETIME_ADD_DAYTIMEDURATION' | DATETIME_ADD_YEARMONTHDURATION = 'DATETIME_ADD_YEARMONTHDURATION' 
				| DATETIME_SUBTRACT_DAYTIMEDURATION = 'DATETIME_SUBTRACT_DAYTIMEDURATION' 
				| DATETIME_SUBTRACT_YEARMONTHDURATION = 'DATETIME_SUBTRACT_YEARMONTHDURATION' 
				| DATE_ADD_YEARMONTHDURATION = 'DATE_ADD_YEARMONTHDURATION' 
				| DATE_SUBTRACT_YEARMONTHDURATION = 'DATE_SUBTRACT_YEARMONTHDURATION' | STRING_GREATER_THAN = 'STRING_GREATER_THAN' 
				| STRING_GREATER_THAN_OR_EQUAL = 'STRING_GREATER_THAN_OR_EQUAL' | STRING_LESS_THAN = 'STRING_LESS_THAN' 
				| STRING_LESS_THAN_OR_EQUAL = 'STRING_LESS_THAN_OR_EQUAL' | TIME_GREATER_THAN = 'TIME_GREATER_THAN' 
				| TIME_GREATER_THAN_OR_EQUAL = 'TIME_GREATER_THAN_OR_EQUAL' | TIME_LESS_THAN = 'TIME_LESS_THAN'
				| TIME_LESS_THAN_OR_EQUAL = 'TIME_LESS_THAN_OR_EQUAL' | TIME_IN_RANGE = 'TIME_IN_RANGE' 
				| DATETIME_GREATER_THAN = 'DATETIME_GREATER_THAN' | DATETIME_GREATER_THAN_OR_EQUAL = 'DATETIME_GREATER_THAN_OR_EQUAL' 
				| DATETIME_LESS_THAN = 'DATETIME_LESS_THAN' | DATETIME_LESS_THAN_OR_EQUAL = 'DATETIME_LESS_THAN_OR_EQUAL' 
				| DATE_GREATER_THAN = 'DATE_GREATER_THAN' | DATE_GREATER_THAN_OR_EQUAL = 'DATE_GREATER_THAN_OR_EQUAL' 
				| DATE_LESS_THAN = 'DATE_LESS_THAN' | DATE_LESS_THAN_OR_EQUAL = 'DATE_LESS_THAN_OR_EQUAL' 
				| STRING_ONE_AND_ONLY = 'STRING_ONE_AND_ONLY' | STRING_BAG_SIZE = 'STRING_BAG_SIZE' | STRING_IS_IN = 'STRING_IS_IN' 
				| STRING_BAG = 'STRING_BAG' | BOOLEAN_ONE_AND_ONLY = 'BOOLEAN_ONE_AND_ONLY' | BOOLEAN_BAG_SIZE = 'BOOLEAN_BAG_SIZE' 
				| BOOLEAN_IS_IN = 'BOOLEAN_IS_IN' | BOOLEAN_BAG = 'BOOLEAN_BAG' | INTEGER_ONE_AND_ONLY = 'INTEGER_ONE_AND_ONLY' 
				| INTEGER_BAG_SIZE = 'INTEGER_BAG_SIZE' | INTEGER_IS_IN = 'INTEGER_IS_IN' | INTEGER_BAG = 'INTEGER_BAG' 
				| DOUBLE_ONE_AND_ONLY = 'DOUBLE_ONE_AND_ONLY' | DOUBLE_BAG_SIZE = 'DOUBLE_BAG_SIZE' | DOUBLE_IS_IN = 'DOUBLE_IS_IN' 
				| DOUBLE_BAG = 'DOUBLE_BAG' | TIME_ONE_AND_ONLY = 'TIME_ONE_AND_ONLY' | TIME_BAG_SIZE = 'TIME_BAG_SIZE' | TIME_IS_IN = 'TIME_IS_IN' 
				| TIME_BAG = 'TIME_BAG' | DATE_ONE_AND_ONLY = 'DATE_ONE_AND_ONLY' | DATE_BAG_SIZE = 'DATE_BAG_SIZE' | DATE_IS_IN = 'DATE_IS_IN' 
				| DATE_BAG = 'DATE_BAG' | DATETIME_ONE_AND_ONLY = 'DATETIME_ONE_AND_ONLY' | DATETIME_BAG_SIZE = 'DATETIME_BAG_SIZE' 
				| DATETIME_IS_IN = 'DATETIME_IS_IN' | DATETIME_BAG = 'DATETIME_BAG' | ANYURI_ONE_AND_ONLY = 'ANYURI_ONE_AND_ONLY' 
				| ANYURI_BAG_SIZE = 'ANYURI_BAG_SIZE' | ANYURI_IS_IN = 'ANYURI_IS_IN' | ANYURI_BAG = 'ANYURI_BAG' 
				| HEXBINARY_ONE_AND_ONLY = 'HEXBINARY_ONE_AND_ONLY' | HEXBINARY_BAG_SIZE = 'HEXBINARY_BAG_SIZE' 
				| HEXBINARY_IS_IN = 'HEXBINARY_IS_IN' | HEXBINARY_BAG = 'HEXBINARY_BAG' | BASE64BINARY_ONE_AND_ONLY = 'BASE64BINARY_ONE_AND_ONLY' 
				| BASE64BINARY_BAG_SIZE = 'BASE64BINARY_BAG_SIZE' | BASE64BINARY_IS_IN = 'BASE64BINARY_IS_IN' 
				| BASE64BINARY_BAG = 'BASE64BINARY_BAG' | DAYTIMEDURATION_ONE_AND_ONLY = 'DAYTIMEDURATION_ONE_AND_ONLY' 
				| DAYTIMEDURATION_BAG_SIZE = 'DAYTIMEDURATION_BAG_SIZE' | DAYTIMEDURATION_IS_IN = 'DAYTIMEDURATION_IS_IN' 
				| DAYTIMEDURATION_BAG = 'DAYTIMEDURATION_BAG' | YEARMONTHDURATION_ONE_AND_ONLY = 'YEARMONTHDURATION_ONE_AND_ONLY' 
				| YEARMONTHDURATION_BAG_SIZE = 'YEARMONTHDURATION_BAG_SIZE' | YEARMONTHDURATION_IS_IN = 'YEARMONTHDURATION_IS_IN' 
				| YEARMONTHDURATION_BAG = 'YEARMONTHDURATION_BAG' | X500NAME_ONE_AND_ONLY = 'X500NAME_ONE_AND_ONLY' 
				| X500NAME_BAG_SIZE = 'X500NAME_BAG_SIZE' | X500NAME_IS_IN = 'X500NAME_IS_IN' | X500NAME_BAG = 'X500NAME_BAG' 
				| RFC822NAME_ONE_AND_ONLY = 'RFC822NAME_ONE_AND_ONLY' | RFC822NAME_BAG_SIZE = 'RFC822NAME_BAG_SIZE' 
				| RFC822NAME_IS_IN = 'RFC822NAME_IS_IN' | RFC822NAME_BAG = 'RFC822NAME_BAG' | IPADDRESS_ONE_AND_ONLY = 'IPADDRESS_ONE_AND_ONLY' 
				| IPADDRESS_BAG_SIZE = 'IPADDRESS_BAG_SIZE' | IPADDRESS_IS_IN = 'IPADDRESS_IS_IN' | IPADDRESS_BAG = 'IPADDRESS_BAG' 
				| DNSNAME_ONE_AND_ONLY = 'DNSNAME_ONE_AND_ONLY' | DNSNAME_BAG_SIZE = 'DNSNAME_BAG_SIZE' | DNSNAME_IS_IN = 'DNSNAME_IS_IN' 
				| DNSNAME_BAG = 'DNSNAME_BAG' | STRING_CONCATENATE = 'STRING_CONCATENATE' | BOOLEAN_FROM_STRING = 'BOOLEAN_FROM_STRING' 
				| STRING_FROM_BOOLEAN = 'STRING_FROM_BOOLEAN' | INTEGER_FROM_STRING = 'INTEGER_FROM_STRING' 
				| STRING_FROM_INTEGER = 'STRING_FROM_INTEGER' | DOUBLE_FROM_STRING = 'DOUBLE_FROM_STRING' 
				| STRING_FROM_DOUBLE = 'STRING_FROM_DOUBLE' | TIME_FROM_STRING = 'TIME_FROM_STRING' | STRING_FROM_TIME = 'STRING_FROM_TIME' 
				| DATE_FROM_STRING = 'DATE_FROM_STRING' | STRING_FROM_DATE = 'STRING_FROM_DATE' | DATETIME_FROM_STRING = 'DATETIME_FROM_STRING' 
				| STRING_FROM_DATETIME = 'STRING_FROM_DATETIME' | ANYURI_FROM_STRING = 'ANYURI_FROM_STRING' 
				| STRING_FROM_ANYURI = 'STRING_FROM_ANYURI' | DAYTIMEDURATION_FROM_STRING = 'DAYTIMEDURATION_FROM_STRING' 
				| STRING_FROM_DAYTIMEDURATION = 'STRING_FROM_DAYTIMEDURATION' | YEARMONTHDURATION_FROM_STRING = 'YEARMONTHDURATION_FROM_STRING' 
				| STRING_FROM_YEARMONTHDURATION = 'STRING_FROM_YEARMONTHDURATION' | X500NAME_FROM_STRING = 'X500NAME_FROM_STRING' 
				| STRING_FROM_X500NAME = 'STRING_FROM_X500NAME' | RFC822NAME_FROM_STRING = 'RFC822NAME_FROM_STRING' 
				| STRING_FROM_RFC822NAME = 'STRING_FROM_RFC822NAME' | IPADDRESS_FROM_STRING = 'IPADDRESS_FROM_STRING' 
				| STRING_FROM_IPADDRESS = 'STRING_FROM_IPADDRESS' | DNSNAME_FROM_STRING = 'DNSNAME_FROM_STRING' 
				| STRING_FROM_DNSNAME = 'STRING_FROM_DNSNAME' | STRING_STARTS_WITH = 'STRING_STARTS_WITH' 
				| ANYURI_STARTS_WITH = 'ANYURI_STARTS_WITH' | STRING_ENDS_WITH = 'STRING_ENDS_WITH' | ANYURI_ENDS_WITH = 'ANYURI_ENDS_WITH' 
				| STRING_CONTAINS = 'STRING_CONTAINS' | ANYURI_CONTAINS = 'ANYURI_CONTAINS' | STRING_SUBSTRING = 'STRING_SUBSTRING' 
				| ANYURI_SUBSTRING = 'ANYURI_SUBSTRING' | ANY_OF = 'ANY_OF' | ALL_OF = 'ALL_OF' | ANY_OF_ANY = 'ANY_OF_ANY' 
				| ALL_OF_ANY = 'ALL_OF_ANY' | ANY_OF_ALL = 'ANY_OF_ALL' | ALL_OF_ALL = 'ALL_OF_ALL' | MAP = 'MAP' 
				| X500NAME_MATCH = 'X500NAME_MATCH' | RFC822NAME_MATCH = 'RFC822NAME_MATCH' | STRING_REGEXP_MATCH = 'STRING_REGEXP_MATCH' 
				| ANYURI_REGEXP_MATCH = 'ANYURI_REGEXP_MATCH' | IPADDRESS_REGEXP_MATCH = 'IPADDRESS_REGEXP_MATCH' 
				| DNSNAME_REGEXP_MATCH = 'DNSNAME_REGEXP_MATCH' | RFC822NAME_REGEXP_MATCH = 'RFC822NAME_REGEXP_MATCH' 
				| X500NAME_REGEXP_MATCH = 'X500NAME_REGEXP_MATCH' | XPATH_NODE_COUNT = 'XPATH_NODE_COUNT' | XPATH_NODE_EQUAL = 'XPATH_NODE_EQUAL' 
				| XPATH_NODE_MATCH = 'XPATH_NODE_MATCH' | STRING_INTERSECTION = 'STRING_INTERSECTION' 
				| STRING_AT_LEAST_ONE_MEMBER_OF = 'STRING_AT_LEAST_ONE_MEMBER_OF' | STRING_UNION = 'STRING_UNION' 
				| STRING_SUBSET = 'STRING_SUBSET' | STRING_SET_EQUALS = 'STRING_SET_EQUALS' | BOOLEAN_INTERSECTION = 'BOOLEAN_INTERSECTION' 
				| BOOLEAN_AT_LEAST_ONE_MEMBER_OF = 'BOOLEAN_AT_LEAST_ONE_MEMBER_OF' | BOOLEAN_UNION = 'BOOLEAN_UNION' 
				| BOOLEAN_SUBSET = 'BOOLEAN_SUBSET' | BOOLEAN_SET_EQUALS = 'BOOLEAN_SET_EQUALS' | INTEGER_INTERSECTION = 'INTEGER_INTERSECTION' 
				| INTEGER_AT_LEAST_ONE_MEMBER_OF = 'INTEGER_AT_LEAST_ONE_MEMBER_OF' | INTEGER_UNION = 'INTEGER_UNION' 
				| INTEGER_SUBSET = 'INTEGER_SUBSET' | INTEGER_SET_EQUALS = 'INTEGER_SET_EQUALS' | DOUBLE_INTERSECTION = 'DOUBLE_INTERSECTION' 
				| DOUBLE_AT_LEAST_ONE_MEMBER_OF = 'DOUBLE_AT_LEAST_ONE_MEMBER_OF' | DOUBLE_UNION = 'DOUBLE_UNION' | DOUBLE_SUBSET = 'DOUBLE_SUBSET' 
				| DOUBLE_SET_EQUALS = 'DOUBLE_SET_EQUALS' | TIME_INTERSECTION = 'TIME_INTERSECTION' 
				| TIME_AT_LEAST_ONE_MEMBER_OF = 'TIME_AT_LEAST_ONE_MEMBER_OF' | TIME_UNION = 'TIME_UNION' | TIME_SUBSET = 'TIME_SUBSET' 
				| TIME_SET_EQUALS = 'TIME_SET_EQUALS' | DATE_INTERSECTION = 'DATE_INTERSECTION' 
				| DATE_AT_LEAST_ONE_MEMBER_OF = 'DATE_AT_LEAST_ONE_MEMBER_OF' | DATE_UNION = 'DATE_UNION' | DATE_SUBSET = 'DATE_SUBSET' 
				| DATE_SET_EQUALS = 'DATE_SET_EQUALS' | DATETIME_INTERSECTION = 'DATETIME_INTERSECTION' 
				| DATETIME_AT_LEAST_ONE_MEMBER_OF = 'DATETIME_AT_LEAST_ONE_MEMBER_OF' | DATETIME_UNION = 'DATETIME_UNION' 
				| DATETIME_SUBSET = 'DATETIME_SUBSET' | DATETIME_SET_EQUALS = 'DATETIME_SET_EQUALS' | ANYURI_INTERSECTION = 'ANYURI_INTERSECTION' 
				| ANYURI_AT_LEAST_ONE_MEMBER_OF = 'ANYURI_AT_LEAST_ONE_MEMBER_OF' | ANYURI_UNION = 'ANYURI_UNION' | ANYURI_SUBSET = 'ANYURI_SUBSET' 
				| ANYURI_SET_EQUALS = 'ANYURI_SET_EQUALS' | HEXBINARY_INTERSECTION = 'HEXBINARY_INTERSECTION' | HEXBINARY_AT_LEAST_ONE_MEMBER_OF = 'HEXBINARY_AT_LEAST_ONE_MEMBER_OF' | HEXBINARY_UNION = 'HEXBINARY_UNION' | HEXBINARY_SUBSET = 'HEXBINARY_SUBSET' | HEXBINARY_SET_EQUALS = 'HEXBINARY_SET_EQUALS' | BASE64BINARY_INTERSECTION = 'BASE64BINARY_INTERSECTION' | BASE64BINARY_AT_LEAST_ONE_MEMBER_OF = 'BASE64BINARY_AT_LEAST_ONE_MEMBER_OF' | BASE64BINARY_UNION = 'BASE64BINARY_UNION' | BASE64BINARY_SUBSET = 'BASE64BINARY_SUBSET' | BASE64BINARY_SET_EQUALS = 'BASE64BINARY_SET_EQUALS' | DAYTIMEDURATION_INTERSECTION = 'DAYTIMEDURATION_INTERSECTION' | DAYTIMEDURATION_AT_LEAST_ONE_MEMBER_OF = 'DAYTIMEDURATION_AT_LEAST_ONE_MEMBER_OF' | DAYTIMEDURATION_UNION = 'DAYTIMEDURATION_UNION' | DAYTIMEDURATION_SUBSET = 'DAYTIMEDURATION_SUBSET' | DAYTIMEDURATION_SET_EQUALS = 'DAYTIMEDURATION_SET_EQUALS' | YEARMONTHDURATION_INTERSECTION = 'YEARMONTHDURATION_INTERSECTION' | YEARMONTHDURATION_AT_LEAST_ONE_MEMBER_OF = 'YEARMONTHDURATION_AT_LEAST_ONE_MEMBER_OF' | YEARMONTHDURATION_UNION = 'YEARMONTHDURATION_UNION' | YEARMONTHDURATION_SUBSET = 'YEARMONTHDURATION_SUBSET' | YEARMONTHDURATION_SET_EQUALS = 'YEARMONTHDURATION_SET_EQUALS' | X500NAME_INTERSECTION = 'X500NAME_INTERSECTION' | X500NAME_AT_LEAST_ONE_MEMBER_OF = 'X500NAME_AT_LEAST_ONE_MEMBER_OF' | X500NAME_UNION = 'X500NAME_UNION' | X500NAME_SUBSET = 'X500NAME_SUBSET' | X500NAME_SET_EQUALS = 'X500NAME_SET_EQUALS' | RFC822NAME_INTERSECTION = 'RFC822NAME_INTERSECTION' | RFC822NAME_AT_LEAST_ONE_MEMBER_OF = 'RFC822NAME_AT_LEAST_ONE_MEMBER_OF' | RFC822NAME_UNION = 'RFC822NAME_UNION' | RFC822NAME_SUBSET = 'RFC822NAME_SUBSET' | RFC822NAME_SET_EQUALS = 'RFC822NAME_SET_EQUALS' | IPADDRESS_INTERSECTION = 'IPADDRESS_INTERSECTION' | IPADDRESS_AT_LEAST_ONE_MEMBER_OF = 'IPADDRESS_AT_LEAST_ONE_MEMBER_OF' | IPADDRESS_UNION = 'IPADDRESS_UNION' | IPADDRESS_SUBSET = 'IPADDRESS_SUBSET' | IPADDRESS_SET_EQUALS = 'IPADDRESS_SET_EQUALS' | DNSNAME_INTERSECTION = 'DNSNAME_INTERSECTION' | DNSNAME_AT_LEAST_ONE_MEMBER_OF = 'DNSNAME_AT_LEAST_ONE_MEMBER_OF' | DNSNAME_UNION = 'DNSNAME_UNION' | DNSNAME_SUBSET = 'DNSNAME_SUBSET' | DNSNAME_SET_EQUALS = 'DNSNAME_SET_EQUALS';
