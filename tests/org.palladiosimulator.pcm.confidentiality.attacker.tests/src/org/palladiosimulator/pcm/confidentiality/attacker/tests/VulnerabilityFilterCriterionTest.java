/**
 */
package org.palladiosimulator.pcm.confidentiality.attacker.tests;

import org.junit.Assert;
import org.junit.jupiter.api.Test;
import org.palladiosimulator.pcm.confidentiality.attacker.tests.common.TestHelpers;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.AttackerFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackComplexity;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackSpecificationFactory;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AttackVector;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.AvailabilityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.ConfidentialityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.IntegrityImpact;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.Privileges;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.attackSpecification.UserInteraction;
import org.palladiosimulator.pcm.confidentiality.attackerSpecification.pcmIntegration.PcmIntegrationFactory;

public class VulnerabilityFilterCriterionTest {
    @Test
    public void isElementFilteredTestAvailabilyImpact() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setAvailabilityImpact(AvailabilityImpact.HIGH);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setAvailabilityImpact(AvailabilityImpact.LOW);
        final var filter = AttackerFactory.eINSTANCE.createImpactVulnerabilityFilterCriterion();
        filter.setAvailabilityImpactMinimum(AvailabilityImpact.HIGH);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        vulnerabilityLow.setAvailabilityImpact(AvailabilityImpact.NONE);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredTestConfidentialityImpact() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setConfidentialityImpact(ConfidentialityImpact.HIGH);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setConfidentialityImpact(ConfidentialityImpact.LOW);
        final var filter = AttackerFactory.eINSTANCE.createImpactVulnerabilityFilterCriterion();
        filter.setConfidentialityImpactMinimum(ConfidentialityImpact.HIGH);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        vulnerabilityLow.setConfidentialityImpact(ConfidentialityImpact.NONE);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredTestIntegrityImpact() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setIntegrityImpact(IntegrityImpact.HIGH);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setIntegrityImpact(IntegrityImpact.LOW);
        final var filter = AttackerFactory.eINSTANCE.createImpactVulnerabilityFilterCriterion();
        filter.setIntegrityImpactMinimum(IntegrityImpact.HIGH);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        vulnerabilityLow.setIntegrityImpact(IntegrityImpact.NONE);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredAttackVector() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setAttackVector(AttackVector.NETWORK);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setAttackVector(AttackVector.ADJACENT_NETWORK);
        final var filter = AttackerFactory.eINSTANCE.createExploitabilityVulnerabilityFilterCriterion();
        filter.setAttackVectorMaximum(AttackVector.NETWORK);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        vulnerabilityLow.setAttackVector(AttackVector.LOCAL);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredAttackComplexity() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setAttackComplexity(AttackComplexity.LOW);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setAttackComplexity(AttackComplexity.HIGH);
        final var filter = AttackerFactory.eINSTANCE.createExploitabilityVulnerabilityFilterCriterion();
        filter.setAttackComplexityMaximum(AttackComplexity.LOW);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredPrivileges() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setPrivileges(Privileges.NONE);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setPrivileges(Privileges.SPECIAL);
        final var filter = AttackerFactory.eINSTANCE.createExploitabilityVulnerabilityFilterCriterion();
        filter.setPrivilegesMaximum(Privileges.NONE);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        vulnerabilityLow.setPrivileges(Privileges.LOW);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
    
    @Test
    public void isElementFilteredUserInteraction() {
        final var vulnerabilityHigh = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityHigh.setUserInteraction(UserInteraction.NONE);
        final var vulnerabilityLow = TestHelpers.createCVEVulnerability(AttackSpecificationFactory.eINSTANCE.createCWEID(), 
                AttackSpecificationFactory.eINSTANCE.createCVEID());
        vulnerabilityLow.setUserInteraction(UserInteraction.REQUIRED);
        final var filter = AttackerFactory.eINSTANCE.createExploitabilityVulnerabilityFilterCriterion();
        filter.setUserInteractionMaximum(UserInteraction.NONE);
        final var systemIntegration = PcmIntegrationFactory.eINSTANCE.createVulnerabilitySystemIntegration();
        systemIntegration.setVulnerability(vulnerabilityLow);
        Assert.assertTrue(filter.isElementFiltered(systemIntegration, null, null));
        systemIntegration.setVulnerability(vulnerabilityHigh);
        Assert.assertFalse(filter.isElementFiltered(systemIntegration, null, null));
    }
}
